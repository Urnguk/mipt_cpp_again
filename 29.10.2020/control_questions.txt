Существуют методы обработки "на месте", что может быть исполнено как с помощью циклов с условиями (для проверки корректности введенных пользователем данных), так и такими функциями как abort() - аварийное завершение программы или assert(), которая завершит программу в случае некорректных данных. Если же мы хотим передавать информацию о возникшей ошибке нашей программе для обработки, существуют коды возврата (через возвращаемое значение функции либо через ссылку на внешнюю переменную), но это с-стиль. с++ предоставляет нам альтернативный механизм - исключения.
Коды возврата, использующие возвращаемое значение функции, могут быть некорректно истолкованны. Использование параметра по ссылке решает эту проблему, но такой подход неудобен для расширения и поддержки. К тому же, это с - стиль, а значит будут проблемы с его применением к классам.
Механизмы исключений вложенны, то есть сколько бы вложенных функций не было внутри блока try, throw приведет к переходу к ближайшему блоку try. При этом при срабатывании throw дальнейший код не будет выполняться, программа сразу перейдет к блоку try. В случае, если у ближайшего блока try нет блока catch, компилятор будет переходить к более внешним блкоам try пока не найдет обработчик исключения нужного типа.
Спецификатор noexcept позволяет нам пометить функцию как не генерирующий исключений, для ускорения работы компилятора. Оператор noexcept возвращает значение типа bool, в зависимости от того может ли потенциально выражение, переданное ему в качестве аргумента привести к выбросу исключения.
Базовая гарантия - в случае срабатывания исключения, нет утечек ресурсов и сохраняются все инварианты класса, то есть программа остается согласованной. Строгая гарантия, то есть транзакционное поведение означает, что в случае срабатывания исключения, программа должно вернуться в последнее устойчивое состояние. Гарантия отсутствия исключений - исключения никогда не генерируются.
