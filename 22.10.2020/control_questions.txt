Композиция: один объект является частью другого. При этом целое знает о существовании части и управляет ею(например определяет срок ее жизни и параметры ее работы), но часть не знает о существовании целого, хотя может иметь отношения только к одному целому. Агрегация: во многом подобна композиции, но здесь целое не контроллирует работу части, а сама часть может относиться к нескольким целым. Ассоциация: два равноправных объекта используют друг друга. Присутствует либо односторонняя, либо двусторонняя связь(хотя бы одна из сторон всегда хранит прямую либо косвенную связь со второй), при этом каждый объект одного вида может иметь отношение к нескольким объектам другого вида. Зависимость: неравноправные объекты, один нуждается в другом для выполнения своей задачи, при этом связи между ними нет: зависимый либо создается при необходимости, либо передается второму в качестве аргумента. 
Важно понимать что при любом виде наследования мы не унаследуем private секцию нашего класса. public наследование:  унаследованные члены сохраняют свой тип, то есть мы копируем и интерфейс и реализацию. private наследование: унаследованные члены становятся становятся private, то есть мы копируем реализацию, но не интерфейс. protected наследование: унаследованные члены становятся protected.
Необходимо полное совпадение сигнатур и типов возврата родительской и дочерней функции, наличие слова virtual перед родительской функцией(хотя перед дочерними ее тоже принято ставить для наглядности), при этом для изменения реализации необходимо после функции добавлять слово override, а для работы с экзмеплярами необходимо использовать указатели или ссылки.
Виртуальные базовые классы те, объект которых является общим для всех наследников. Соответственно решается проблема создания нескольких экземпляров базового класса при множественном наследовании.
Порождающие паттерны создают новые объекты, либо дают доступ к уже существующим. Структурные паттерны обеспечивают правильное взаимодействие нескольких объектов. Паттерны поведения описывают принципы, по которым должны идти процессы.
