Вариативные шаблоны удобны, когда мы не знаем, какое количество аргументов (некоторые из которых могут быть разных типов) будет передано нашей функции. Например, это удобно для операций вроде суммирования большого количества аргументов или для операций с кортежами данных.
Обработка по очереди может осуществляться посредством рекурсвиного вызова с обработкой за каждый вызов первого аргумента из списка. 
для шаблона template <typename ... Types> можно применить функцию sizeof ... (Types)
Бывают выражения свертки для Types... types: (... operator types) и (types operator ...), где первое выражение будет применить оператор ко всем аргументам из пакета последовательно, начиная с первых, а второе - с последних. Помимо этого мы можем внедрить в выражение свертки неокторое внешнее значение(init), тогда выражения будут иметь вид: (init operator ... operator types) и (types operator ... operator init).
Динамический полиморфизм заключается в обращении к наследнику с перегруженными виртуальными функциями по указателю на базовый класс. Статический полиморфизм осуществляется посредством создания шаблона функции для нужного типа данных. По факту, они оба позволяют использовать один и тот же код для различных объектов, но при этом в статическом полиморфизме выбор объекта происходит на этапе компиляции, а а в динамическом - по зоду выполнения программы. Это делает статический полиморфизм более выгодным с точки зрения производительности, однако при этом затрудняется использование интерфейса программы и мы теряем возможность оперировать всеми видами объектов сразу (только по отдельности), как это было в динамическом полиморфизме, когда мы хранили все виды объектов в одном массиве.
